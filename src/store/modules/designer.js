/*
 * @Description: 
 * @Version: 1.0
 * @Autor: Luan Feng
 * @Date: 2020-11-25 09:35:01
 * @LastEditors: Luan Feng
 * @LastEditTime: 2020-12-04 17:09:23
 * @Tool: Auto Generated by koroFileHeader
 */
import { cloneDeep, merge } from 'lodash'
function findElementById(children, id) {
  const queue = [...children]
  while (queue.length) {
    const o = queue.shift()
    if (o.id=== id) return o
    queue.push(...(o.children || []))
  }
}

const designer = {
  namespaced: true,
  state: {
    // selElement:{
    //   id:'',
    //   parentId:'',
    //   pageId:'',
    //   groupType:'', // 分类类型 shape, widget, chart
    //   type:'', // 自身类型 widget:['htmlFragment','table','input'...]
    //   cfg:null
    // },
    pageCfg:{
      id:'-1',
      title:"undefined",
      style:{},
      containers:[],
      widgets:[],
      charts:[],
      shapes:[]
    }
  },
  getters: {
    getPageCfg:(state) => ()=>{
      return state.pageCfg
    },
    /**
     * @description: 获取所选元素的配置信息 调用形式: store.getters['designer/getClonedElementCfg'](id,type)
     * @param {String} id:element id
     * @param {String} type:元素类型： container/widgets/charts/shapes
     * @return {Object}
     */
    getClonedElementCfg: (state) => (id,type) => {
      if(!type){
        console.log('getClonedElementCfg', state.pageCfg,id)
        if(state.pageCfg.id === id){
          let copyedPageCfg = {...state.pageCfg}
          delete copyedPageCfg.containers
          delete copyedPageCfg.widgets
          delete copyedPageCfg.charts
          delete copyedPageCfg.shapes
          return cloneDeep(copyedPageCfg)
        }      
      }else{
        let founded = findElementById(state.pageCfg[type],id)
        if(founded){
          return cloneDeep(founded)
        }
      }
      return null
    },
    getElementCfg:(state)=>(id,type)=>{
      if(!type){
        if(state.pageCfg.id === id){
          return state.pageCfg
        }      
      }else{
        return findElementById(state.pageCfg[type],id)
      }
      return null
    }
  },
  mutations: {
    INIT_PAGE(state, pageCfg){      
      state.pageCfg = pageCfg
    },
    UPDATE_PAGE_STYLE(state, style){
      merge(state.pageCfg.style,style)
    },
    INSERT_ELEMENT(state, elCfg) {
      const groupType = elCfg.groupType
      delete elCfg.groupType
      state.pageCfg[groupType].push(elCfg)      
    },
    UPDATE_ELEMENT(state, elCfg) {
      const toUpdateElement = this.getters['designer/getElementCfg'](elCfg.id, elCfg.groupType)
      if(toUpdateElement){
        delete elCfg.groupType
        merge(toUpdateElement, elCfg)
      }
    },
    REMOVE_ELEMENT(state, el){
      const toRemoveElement = this.getters['designer/getElementCfg'](el.id, el.groupType)
      const toRemoveElementIndex = state[el.groupType].indexOf(toRemoveElement)
      state.pageCfg[el.groupType].splice(toRemoveElementIndex,1)
    }
  },
  actions: {
    // 调用形式 this.$store.dispatch('designer/initPage')
    initPage({ commit }, pageCfg) {
      commit('INIT_PAGE', pageCfg)
    },
    updatePageStyle({ commit }, style){
      commit('UPDATE_PAGE_STYLE', style)
    },
    insertElement({ commit },elCfg){
      commit('INSERT_ELEMENT',elCfg)
    },
    updateElement({ commit }, elCfg) {
      commit('UPDATE_ELEMENT', elCfg)
    },
    removeElement({ commit }, el) {
      commit('REMOVE_ELEMENT', el)
    }
  }
}
export default designer
